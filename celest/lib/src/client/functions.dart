// Generated by Celest. This file should not be modified manually, but
// it can be checked into version control.
// ignore_for_file: type=lint, unused_local_variable, unnecessary_cast, unnecessary_import

library; // ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:convert' as _$convert;

import 'package:celest/celest.dart';
import 'package:celest_core/src/exception/cloud_exception.dart';
import 'package:celest_core/src/exception/serialization_exception.dart';
import 'package:shared/src/unsplash_collection.dart' as _$unsplash_collection;
import 'package:unsplash_client/src/model/photo.dart' as _$photo;

import '../../client.dart';

class CelestFunctions {
  final unsplash = CelestFunctionsUnsplash();
}

class CelestFunctionsUnsplash {
  Never _throwError({
    required int $statusCode,
    required Map<String, Object?> $body,
  }) {
    final $error = ($body['error'] as Map<String, Object?>);
    final $code = ($error['code'] as String);
    final $details = ($error['details'] as Map<String, Object?>?);
    switch ($code) {
      case r'BadRequestException':
        throw Serializers.instance.deserialize<BadRequestException>($details);
      case r'UnauthorizedException':
        throw Serializers.instance.deserialize<UnauthorizedException>($details);
      case r'InternalServerError':
        throw Serializers.instance.deserialize<InternalServerError>($details);
      case r'SerializationException':
        throw Serializers.instance
            .deserialize<SerializationException>($details);
      case _:
        switch ($statusCode) {
          case 400:
            throw BadRequestException($code);
          case _:
            throw InternalServerError($code);
        }
    }
  }

  Future<_$photo.Photo?> randomUnsplashImage({
    required _$unsplash_collection.UnsplashSource source,
    _$unsplash_collection.UnsplashPhotoOrientation? orientation =
        _$unsplash_collection.UnsplashPhotoOrientation.landscape,
  }) async {
    final $response = await celest.httpClient.post(
      celest.baseUri.resolve('/unsplash/random-unsplash-image'),
      headers: {'Content-Type': 'application/json; charset=utf-8'},
      body: _$convert.jsonEncode({
        r'source': Serializers.instance
            .serialize<_$unsplash_collection.UnsplashSource>(source),
        r'orientation': Serializers.instance
            .serialize<_$unsplash_collection.UnsplashPhotoOrientation?>(
                orientation),
      }),
    );
    final $body =
        (_$convert.jsonDecode($response.body) as Map<String, Object?>);
    if ($response.statusCode != 200) {
      _throwError(
        $statusCode: $response.statusCode,
        $body: $body,
      );
    }
    return Serializers.instance.deserialize<_$photo.Photo?>($body['response']);
  }
}
